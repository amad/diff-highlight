commit a2c115b1c054a22136eafedb1d743d68f64ea71e
Author: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date:   Fri Feb 12 14:16:45 2016 +0900

    Refactor numfig

diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py
index 9fb16a9..b23d916 100644
--- a/sphinx/domains/std.py
+++ b/sphinx/domains/std.py
@@ -23,7 +23,7 @@ from sphinx.roles import XRefRole
 from sphinx.locale import l_, _
 from sphinx.domains import Domain, ObjType
 from sphinx.directives import ObjectDescription
-from sphinx.util import ws_re, get_figtype
+from sphinx.util import ws_re
 from sphinx.util.nodes import clean_astext, make_refnode
 from sphinx.util.compat import Directive
 
@@ -494,6 +494,12 @@ class StandardDomain(Domain):
         'option': 'unknown option: %(target)s',
     }
 
+    enumerable_nodes = {  # node_class -> (figtype, accessor)
+        nodes.figure: ('figure', None),
+        nodes.table: ('table', None),
+        nodes.container: ('code-block', None),
+    }
+
     def clear_doc(self, docname):
         for key, (fn, _l) in list(self.data['progoptions'].items()):
             if fn == docname:
@@ -543,33 +549,9 @@ class StandardDomain(Domain):
             anonlabels[name] = docname, labelid
             if node.tagname == 'section':
                 sectname = clean_astext(node[0])  # node[0] == title node
-            elif node.tagname == 'figure':
-                for n in node:
-                    if n.tagname == 'caption':
-                        sectname = clean_astext(n)
-                        break
-                else:
-                    continue
-            elif node.tagname == 'image' and node.parent.tagname == 'figure':
-                for n in node.parent:
-                    if n.tagname == 'caption':
-                        sectname = clean_astext(n)
-                        break
-                else:
-                    continue
-            elif node.tagname == 'table':
-                for n in node:
-                    if n.tagname == 'title':
-                        sectname = clean_astext(n)
-                        break
-                else:
-                    continue
-            elif node.tagname == 'container' and node.get('literal_block'):
-                for n in node:
-                    if n.tagname == 'caption':
-                        sectname = clean_astext(n)
-                        break
-                else:
+            elif self.is_enumerable_node(node):
+                sectname = self.get_numfig_title(node)
+                if sectname is None:
                     continue
             elif node.traverse(addnodes.toctree):
                 n = node.traverse(addnodes.toctree)[0]
@@ -634,10 +616,9 @@ class StandardDomain(Domain):
                          lineno=node.line)
                 return contnode
 
-            try:
-                target_node = env.get_doctree(docname).ids[labelid]
-                figtype = get_figtype(target_node)
-            except:
+            target_node = env.get_doctree(docname).ids.get(labelid)
+            figtype = self.get_figtype(target_node)
+            if figtype is None:
                 return None
 
             try:
@@ -747,3 +728,40 @@ class StandardDomain(Domain):
     def get_type_name(self, type, primary=False):
         # never prepend "Default"
         return type.lname
+
+    def is_enumerable_node(self, node):
+        return node.__class__ in self.enumerable_nodes
+
+    def get_numfig_title(self, node):
+        """Get the title of enumerable nodes to refer them using its title"""
+        _, accessor = self.enumerable_nodes.get(node.__class__, (None, None))
+        if accessor:
+            return accessor(node)
+        elif node.tagname == 'figure':
+            for subnode in node:
+                if subnode.tagname == 'caption':
+                    return clean_astext(subnode)
+        elif node.tagname == 'table':
+            for subnode in node:
+                if subnode.tagname == 'title':
+                    return clean_astext(subnode)
+        elif node.tagname == 'container' and node.get('literal_block'):
+            for subnode in node:
+                if subnode.tagname == 'caption':
+                    return clean_astext(subnode)
+
+        return None
+
+    def get_figtype(self, node):
+        """Get figure type of nodes."""
+        def has_child(node, cls):
+            return any(isinstance(child, cls) for child in node)
+
+        if isinstance(node, nodes.container):
+            if has_child(node, nodes.literal_block):
+                return 'code-block'
+            else:
+                return None
+        else:
+            figtype, _ = self.enumerable_nodes.get(node.__class__, (None, None))
+            return figtype
diff --git a/sphinx/environment.py b/sphinx/environment.py
index 931407f..2d65328 100644
--- a/sphinx/environment.py
+++ b/sphinx/environment.py
@@ -37,7 +37,7 @@ from docutils.frontend import OptionParser
 from sphinx import addnodes
 from sphinx.io import SphinxStandaloneReader, SphinxDummyWriter, SphinxFileInput
 from sphinx.util import url_re, get_matching_docs, docname_join, split_into, \
-    FilenameUniqDict, get_figtype, split_index_msg
+    FilenameUniqDict, split_index_msg
 from sphinx.util.nodes import clean_astext, make_refnode, WarningStream, is_translatable
 from sphinx.util.osutil import SEP, getcwd, fs_encoding, ensuredir
 from sphinx.util.i18n import find_catalog_files
@@ -1746,7 +1746,7 @@ class BuildEnvironment:
 
                     continue
 
-                figtype = get_figtype(subnode)
+                figtype = self.domains['std'].get_figtype(subnode)
                 if figtype and subnode['ids']:
                     register_fignumber(docname, secnum, figtype, subnode)
 
diff --git a/sphinx/transforms.py b/sphinx/transforms.py
index 430ba3d..99490b5 100644
--- a/sphinx/transforms.py
+++ b/sphinx/transforms.py
@@ -113,19 +113,11 @@ class AutoNumbering(Transform):
     default_priority = 210
 
     def apply(self):
-        def has_child(node, cls):
-            return any(isinstance(child, cls) for child in node)
+        domain = self.document.settings.env.domains['std']
 
         for node in self.document.traverse(nodes.Element):
-            if isinstance(node, nodes.figure):
-                if has_child(node, nodes.caption):
-                    self.document.note_implicit_target(node)
-            elif isinstance(node, nodes.table):
-                if has_child(node, nodes.title):
-                    self.document.note_implicit_target(node)
-            elif isinstance(node, nodes.literal_block):
-                if node.parent and has_child(node.parent, nodes.caption):
-                    self.document.note_implicit_target(node.parent)
+            if domain.is_enumerable_node(node) and domain.get_numfig_title(node):
+                self.document.note_implicit_target(node)
 
 
 class SortIds(Transform):
diff --git a/sphinx/util/__init__.py b/sphinx/util/__init__.py
index bb13f3f..0c823fb 100644
--- a/sphinx/util/__init__.py
+++ b/sphinx/util/__init__.py
@@ -514,23 +514,6 @@ class PeekableIterator(object):
         return item
 
 
-def get_figtype(node):
-    """Return figtype for given node."""
-    def has_child(node, cls):
-        return any(isinstance(child, cls) for child in node)
-
-    from docutils import nodes
-    if isinstance(node, nodes.figure):
-        return 'figure'
-    elif isinstance(node, nodes.table):
-        return 'table'
-    elif isinstance(node, nodes.container):
-        if has_child(node, nodes.literal_block):
-            return 'code-block'
-
-    return None
-
-
 def import_object(objname, source=None):
     try:
         module, name = objname.rsplit('.', 1)
